// <auto-generated />
using System;
using Kraken.Net.Objects;
using KrakenTradesDatabase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KrakenTradesDatabase.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211208060115_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "order_side", new[] { "buy", "sell" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "order_type_minimal", new[] { "limit", "market" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KrakenTradesDatabase.Symbol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Symbols");
                });

            modelBuilder.Entity("KrakenTradesDatabase.Trade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<OrderSide>("Side")
                        .HasColumnType("order_side");

                    b.Property<int>("SymbolId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<OrderTypeMinimal>("Type")
                        .HasColumnType("order_type_minimal");

                    b.HasKey("Id");

                    b.HasIndex("Price");

                    b.HasIndex("SymbolId");

                    b.HasIndex("TimeStamp");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("KrakenTradesDatabase.Trade", b =>
                {
                    b.HasOne("KrakenTradesDatabase.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symbol");
                });
#pragma warning restore 612, 618
        }
    }
}
